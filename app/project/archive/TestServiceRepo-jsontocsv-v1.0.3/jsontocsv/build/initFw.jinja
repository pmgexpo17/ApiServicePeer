__all__ = ['promote', 'iterate']

from functools import wraps
import asyncio

promoteFw = {
{% for actorKey in actors %}
{% set metaKey = '%s-promote' % actorKey %}
{% if metaKey in rdata %}
  '{{ metaKey }}':{
{% for key, value in rdata[metaKey].items() %}
    '{{ key }}':
      {{ value.__str__() }},
{% endfor %}
  },
{% endif %}
{% endfor %}
}

class promote:
  def __init__(self, role):
    metaKey = f'{role}-promote'
    self.metaFw = promoteFw[metaKey]

  def __call__(self, func):
    @wraps(func)
    def wrapper(obj, *args, **kwargs):
      obj._quicken = {}
      for key, value in self.metaFw.items():
        obj._quicken[key] = value
      func(obj, *args, **kwargs)
    return wrapper

iterateFw = {
{% for actorKey in actors %}
{% set metaKey = '%s-iterate' % actorKey %}
{% if metaKey in rdata %}
  '{{ metaKey }}':{
{% for key, value in rdata[metaKey].items() %}
    '{{ key }}':
      {{ value.__str__() }},
{% endfor %}
  },
{% endif %}
{% endfor %}
}

class iterate:
  def __init__(self, role):
    metaKey = f'{role}-iterate'
    self.metaFw = iterateFw[metaKey]

  def __call__(self, func):
    @wraps(func)
    def wrapper(obj, *args, **kwargs):
      if asyncio.iscoroutinefunction(func):
        return func(obj, *args, **kwargs)
      f = asyncio.Future()
      try:
        func(obj, *args, **kwargs)
        obj.state.__dict__.update(self.metaFw[func.__name__])
      except Exception as ex:
        f.set_exception(ex)
      else:
        f.set_result(obj.state)
      finally:
        return f
    return wrapper
